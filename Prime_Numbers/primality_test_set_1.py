"""
素数判定 レベル１ ☆☆★
引数で渡された値が素数をかどうかを判別する

[ロジック1]
1からnまでチェックする代わりに、√nまで判定すれば良い。nの大きい方の値をチェックするまでに、すでに√nが約数になっているからである
例えば30だったら、1-30, 2-15, 3-10, 5-6 と約数のペアがあるが、左側の最大は5である。
これは、√30 ≒ 5.47722 より、約数の堺ができるためである

[ロジック2]
5以上の任意の自然数nは、n=6m, 6m±1, 6m±2, 6m+3（m=1,2,3,4,...）のいずれかの形で表すことができる*1、
ということに注目すると、
・n=6m で表せる自然数
n=6m は6で割り切れるので素数でない。
・n=6m±2 で表せる自然数
n=6m±2=2(3m±1) となり、2で割り切れるので素数でない。
・n=6m+3 で表せる自然数
n=6m+3=3(2m±1) となり、3で割り切れるので素数でない。
となり、5以上の自然数nが n=6m,6m±2,6m+3 （m=1,2,3,4,...）のいずれかで表現できるとき、Nは素数でない。
よって、とある素数があったとき、その素数は6m+1または6m-1のいずれかで表すことができる。
以上より、5以上の素数は全て、自然数mを用いて6m+1または6m-1の形で表すことができる。
"""


from typing import Any

class PrimalityTester1(object):

    def is_prime(self, n: int) -> bool:
        # 0, 1は極値として除去
        if (n <= 1) : 
            return False
        if (n <= 3) : 
            return True

        # 2, 3で割り切れる数であれば素数ではない
        if (n % 2 == 0 or n % 3 == 0): 
            return False

        i = 5
        while(i * i <= n) : 
            if (n % i == 0 or n % (i + 2) == 0) : 
                return False
            i += 6

        return True
